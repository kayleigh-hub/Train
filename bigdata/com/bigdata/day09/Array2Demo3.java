package com.bigdata.day09;

/*
        二维数组定义的第三种格式：
            格式3：
            数据类型[][] 变量名 = new 数据类型[][]{{元素…},{元素…},{元素…},...};
        左边：
             数据类型：表示最终元素的数据类型
             [][]：表示是一个二维数组
             变量名：二维数组的名称
        右边：
            new：为二维数组在堆内存中开辟空间
            数据类型：表示的是最终每个一维数组中元素的数据类型
            [][]：表示的是一个二维数组
            {{元素…},{元素…},{元素…},...}：
                表示的是将来自定义多少个一维数组，以及每个一维数组中的元素个数也可以不一样
        举例：
            int[][] arr = new int[][]{{1,2},{11,22,33},{100,200,300},{10,20}};
            表示的是定义一个二维数组，二维数组中的元素是由4个一维数组组成，
            每个一维数组中的元素个数不一样。
            有点类似于一维数组的静态初始化，前两个格式有点类似于一维数组的动态初始化。
        简化格式：
            数据类型[][] 变量名 = {{元素…},{元素…},{元素…},...};
            举例：
                int[][] arr = {{1,2},{11,22,33},{100,200,300},{10,20}};


        错误的格式：
            不能和格式1，格式2混合使用
            int[][] arr = new int[3][]{{1,2},{11,22,33},{100,200,300},{10,20}};


 */
public class Array2Demo3 {
    public static void main(String[] args) {
        //使用二维数组定义格式2定义
        int[][] arr = {{1,2},{11,22,33},{100,200,300},{10,20,30,40}};

        System.out.println(arr); //输出二维数组本身的地址值
        System.out.println(arr[0]); //输出二维数组中第一个一维数组的地址值
        System.out.println(arr[1]); //输出二维数组中第二个一维数组的地址值
        System.out.println(arr[2]); //输出二维数组中第三个一维数组的地址值
        System.out.println(arr[3]); //输出二维数组中第四个一维数组的地址值

        //输出二维数组中第一个一维数组中的第一个元素值
        System.out.println(arr[0][0]);
        //输出二维数组中第一个一维数组中的第二个元素值
        System.out.println(arr[0][1]);

        //输出二维数组中第三个一维数组中的第一个元素值
        System.out.println(arr[2][0]);
        //输出二维数组中第四个一维数组中的第三个元素值
        System.out.println(arr[3][2]);


    }
}
